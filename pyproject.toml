[tool.ruff]
# Ruff configuration for code quality
line-length = 100
target-version = "py311"

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Also enable: isort (I), pep8-naming (N), pyupgrade (UP), flake8-bugbear (B)
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "PIE", # flake8-pie
    "T20", # flake8-print
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (we set line-length to handle this)
    "E203",  # Whitespace before ':' (conflicts with black)
    "B008",  # Do not perform function calls in argument defaults (FastAPI uses this pattern)
    "T201",  # print found (allow prints in some contexts)
]

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    "reports",
    "data",
]

# Rules per directory
[tool.ruff.per-file-ignores]
"tests/*" = ["T201", "SIM114"]  # Allow prints and assert statements in tests
"**/__init__.py" = ["F401"]  # Allow unused imports in __init__.py files

[tool.ruff.isort]
known-first-party = ["app", "etl", "tests"]
force-single-line = false
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
# Allow uppercase names for constants
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.bandit]
# Bandit security linting configuration
exclude_dirs = ["tests", "venv", ".venv", "build", "dist", "data"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_wildcard

[tool.coverage.run]
# Coverage configuration
source = ["app", "etl"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
# Coverage reporting configuration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "reports/coverage"

[tool.coverage.xml]
output = "reports/coverage.xml"